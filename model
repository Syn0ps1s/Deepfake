#cell 1
import tensorflow as tf
import dlib
import cv2
import os
import numpy as np
from PIL import Image, ImageChops, ImageEnhance
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import img_to_array, load_img

#cell 2
tf.__version__

#cell 3
model = tf.keras.models.load_model('deepfake-detection-model.keras')

#cell 4
input_shape = (128, 128, 3)
pr_data = []
detector = dlib.get_frontal_face_detector()

img = cv2.imread('fake_10787.jpg')
face_rects, scores, idx = detector.run(img, 0)
for i, d in enumerate(face_rects):
    x1 = d.left()
    y1 = d.top()
    x2 = d.right()
    y2 = d.bottom()
    crop_img = img[y1:y2, x1:x2]
    data = img_to_array(cv2.resize(crop_img, (128, 128))).flatten() / 255.0    
    data = data.reshape(-1, 128, 128, 3)
    #now that we are using a functional model and not a sequential
    # Make predictions on the data
    predictions = model.predict(data)
    # Convert the predictions to real or fake
    predicted_classes = np.argmax(predictions, axis=1)
    print(predicted_classes)

